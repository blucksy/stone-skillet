<div class="px-page" id="our-muffins">
  <p class="text-heading text-center pb-[36px]">Explore Our Flavors</p>
  <div class="!hidden md:!grid  main-grid">
    {% assign half = section.blocks.size | divided_by: 2 %}

    <div class="lg:col-start-2 col-span-3 flex flex-wrap gap-y-[12px] justify-center h-fit">
      {% for block in section.blocks limit: half %}
        <flavor-picker
          role="radio"
          class="aria-checked:!opacity-100 hover:opacity-75 aria-checked:cursor-default cursor-pointer opacity-50 transition-opacity w-1/2 h-fit"
          aria-checked="{% if forloop.first %}true{% else %}false{% endif %}"
          data-title="{{ block.settings.title }}"
          data-description="{{ block.settings.description }}"
          data-ingredients="{{ block.settings.ingredients }}"
          data-color="{{ block.settings.bg_color }}"
        >
          <div class="aspect-w-9 aspect-h-10">
            {% render 'image', image: block.settings.image, class: 'h-full w-full object-cover' %}
          </div>
        </flavor-picker>
      {% endfor %}
    </div>

    <div
      id="flavor"
      data-flavor-panel
      style="--flavor-bg: {{ section.blocks[0].settings.bg_color }}; background: var(--flavor-bg);"
      class="relative col-span-6 lg:col-span-4 rounded dotted px-[18px] py-[24px] flex flex-col gap-[24px] text-center transition-colors"
    >
      <div class="ball absolute top-[5%] left-[8%] rotate-[-14deg]" style="background: var(--flavor-bg)">Non-GMO</div>
      <div class="ball absolute left-[9%] top-[40%] rotate-[-9deg]" style="background: var(--flavor-bg)">
        Rich in <br>
        Fiber
      </div>
      <div class="ball absolute right-[8%] top-[20%] rotate-[10deg]" style="background: var(--flavor-bg)">
        Source<br>
        of Protein
      </div>

      <div class=" aspect-w-9 aspect-h-10">
        {% render 'image',
          image: section.blocks[0].settings.image,
          alt: section.blocks[0].settings.title,
          class: 'dotted rounded-[6px] h-full w-full object-cover'
        %}
      </div>
      <p class="text-secondary" data-flavor-title>{{ section.blocks[0].settings.title }}</p>
      <div class="relative ">
        <p data-flavor-description>{{ section.blocks[0].settings.description }}</p>
        <p
          class="absolute top-1/2 -translate-y-1/2 text-[12px] leading-[13px] aria-hidden:pointer-events-none aria-hidden:opacity-0  "
          data-flavor-ingredients
          id="flavor-ingredients"
          aria-hidden="true"
          style="background: var(--flavor-bg);"
        >
          {{ section.blocks[0].settings.ingredients }}
        </p>
      </div>
      <button
        class="ingredients-toggle italic opacity-75 text-[12px] leading-[13px] aria-expanded:underline"
        aria-controls="flavor-ingredients"
        aria-expanded="false"
      >
        Ingredients
      </button>
    </div>

    <div class="col-span-3 flex flex-wrap gap-y-[12px] justify-center h-fit">
      {% for block in section.blocks offset: half %}
        <flavor-picker
          role="button"
          class="aria-checked:!opacity-100 hover:opacity-75 aria-checked:cursor-default cursor-pointer opacity-50 transition-opacity w-1/2 h-fit "
          aria-checked="false"

          data-title="{{ block.settings.title }}"
          data-description="{{ block.settings.description }}"
          data-ingredients="{{ block.settings.ingredients }}"
          data-color="{{ block.settings.bg_color }}"
        >
          <div class="aspect-w-9 aspect-h-10">
            {% render 'image', image: block.settings.image, class: 'h-full w-full object-cover' %}
          </div>
        </flavor-picker>
      {% endfor %}
    </div>
  </div>

  <div class="block md:hidden -mx-[19px]">
    <swiper-gallery data-gap="0px" data-coverflow="true" class="overflow-x-hidden  ">
      {% for block in section.blocks %}
        <div
          data-flavor-panel
          style="--flavor-bg: {{ block.settings.bg_color }}; background: var(--flavor-bg);"
          class="
            swiper-slide !w-[calc((100vw-9px*9-18px*2)/10*8+9px*7)] relative rounded dotted !flex flex-col  text-center
            px-[9px] py-[18px] gap-[18px]
            sm:px-[18px] sm:py-[24px] sm:gap-[24px]
            [&:not(.swiper-slide-active)]:!scale-90 transition-transform duration-500 ease-in-out
          "
        >
          <div class="ball absolute left-[3%] top-[5%] rotate-[-14deg]" style="background: var(--flavor-bg)">
            Non-GMO
          </div>
          <div class="ball absolute left-[6%] top-[40%] rotate-[-9deg]" style="background: var(--flavor-bg)">
            Rich in <br>
            Fiber
          </div>
          <div class="ball absolute right-[8%] top-[20%] rotate-[10deg]" style="background: var(--flavor-bg)">
            Source<br>
            of Protein
          </div>

          <div class=" aspect-w-9 aspect-h-10">
            {% render 'image',
              image: block.settings.image,
              alt: block.settings.title,
              class: 'dotted rounded-[6px] h-full w-full object-cover'
            %}
          </div>
          <p class="text-secondary">{{ block.settings.title }}</p>
          <div class="relative ">
            <p>{{ block.settings.description }}</p>
            <p
              class="absolute top-1/2 -translate-y-1/2 text-[12px] leading-[13px] aria-hidden:pointer-events-none aria-hidden:opacity-0  "
              data-flavor-ingredients
              aria-hidden="true"
              style="background: var(--flavor-bg);"
            >
              {{ block.settings.ingredients }}
            </p>
          </div>
          <button
            class="italic ingredients-toggle opacity-75 text-[12px] leading-[13px] aria-expanded:underline"
            id="ingredients-{{ forloop.index0 }}"
            aria-controls="flavor-ingredients"
            aria-expanded="false"
          >
            Ingredients
          </button>
        </div>
      {% endfor %}
    </swiper-gallery>
  </div>
</div>

<script>
  function applyFlavorToDetail(flavorEl) {
    if (!flavorEl) return;

    // update checked attribute
    document.querySelectorAll('flavor-picker').forEach((fp) => fp.setAttribute('aria-checked', 'false'));
    flavorEl.setAttribute('aria-checked', 'true');

    const flavorContainer = document.getElementById('flavor');
    if (!flavorContainer) return;

    // update image + text
    const img = flavorEl.querySelector('img');
    const imageEl = flavorContainer.querySelector('img');
    const titleEl = flavorContainer.querySelector('[data-flavor-title]');
    const descriptionEl = flavorContainer.querySelector('[data-flavor-description]');
    const ingredientsEl = flavorContainer.querySelector('[data-flavor-ingredients]');
    const toggleBtn = flavorContainer.querySelector('button');

    if (img && imageEl) {
      imageEl.src = img.src;
      imageEl.srcset = img.srcset || '';
      imageEl.alt = 'Stone & Skilleet ' + (flavorEl.dataset.title || '') + ' packaging';
    }

    if (titleEl) titleEl.textContent = flavorEl.dataset.title || '';
    if (descriptionEl) descriptionEl.textContent = flavorEl.dataset.description || '';
    if (ingredientsEl) {
      ingredientsEl.textContent = flavorEl.dataset.ingredients || '';
      ingredientsEl.setAttribute('aria-hidden', 'true'); // always hide when switching flavors
    }
    if (toggleBtn) {
      toggleBtn.setAttribute('aria-expanded', 'false');
      toggleBtn.classList.remove('underline');
    }

    flavorContainer.style.setProperty('--flavor-bg', flavorEl.dataset.color);
    flavorContainer.style.background = `var(--flavor-bg)`;
  }

  // Toggle ingredients button behavior
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('[data-flavor-panel]').forEach((panel) => {
      const ingredientsEl = panel.querySelector('[data-flavor-ingredients]');
      const toggleBtn = panel.querySelector('.ingredients-toggle');
      if (!ingredientsEl || !toggleBtn) return;

      ingredientsEl.setAttribute('aria-hidden', 'true');
      toggleBtn.setAttribute('aria-expanded', 'false');

      toggleBtn.addEventListener('click', () => {
        const isHidden = ingredientsEl.getAttribute('aria-hidden') === 'true';
        ingredientsEl.setAttribute('aria-hidden', isHidden ? 'false' : 'true');
        toggleBtn.setAttribute('aria-expanded', isHidden ? 'true' : 'false');
        toggleBtn.classList.toggle('underline', isHidden);
      });
    });
  });
  // Custom element behavior
  class FlavorPicker extends HTMLElement {
    connectedCallback() {
      if (!this._flavorClickHandler) {
        this._flavorClickHandler = () => {
          if (this.getAttribute('aria-checked') === 'true') return;
          applyFlavorToDetail(this);
        };
        this.addEventListener('click', this._flavorClickHandler);
      }
    }
    disconnectedCallback() {
      if (this._flavorClickHandler) {
        this.removeEventListener('click', this._flavorClickHandler);
      }
    }
  }

  if (!customElements.get('flavor-picker')) {
    customElements.define('flavor-picker', FlavorPicker);
  }
</script>

{% schema %}
{
  "name": "Flavors",
  "blocks": [
    {
      "type": "flavor",
      "name": "Flavor",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "color",
          "id": "bg_color",
          "label": "Color (pick directly from image)"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Delicious Flavor"
        },
        {
          "type": "text",
          "id": "description",
          "label": "Description",
          "default": "A brief description of the flavor."
        },
        {
          "type": "textarea",
          "id": "ingredients",
          "label": "Ingredients",
          "default": "List of ingredients."
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Hero",
      "category": "Custom"
    }
  ]
}
{% endschema %}

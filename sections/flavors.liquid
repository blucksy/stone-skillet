<div class="hidden md:grid px-page main-grid">
  {% assign half = section.blocks.size | divided_by: 2 %}

  <div class="col-start-2 col-span-3 flex flex-wrap gap-y-[12px] justify-center h-fit">
    {% for block in section.blocks limit: half %}
      <flavor-picker
        role="radio"
        class="aria-checked:!opacity-100 hover:opacity-75 aria-checked:cursor-default cursor-pointer opacity-50 transition-opacity w-1/2 h-fit"
        aria-checked="{% if forloop.first %}true{% else %}false{% endif %}"
        data-title="{{ block.settings.title }}"
        data-description="{{ block.settings.description }}"
        data-ingredients="{{ block.settings.ingredients }}"
        data-color="{{ block.settings.bg_color }}"
      >
        <div class="aspect-w-9 aspect-h-10">
          {% render 'image', image: block.settings.image, class: 'h-full w-full object-cover' %}
        </div>
      </flavor-picker>
    {% endfor %}
  </div>

  <div
    id="flavor"
    class="col-span-4 rounded dotted px-[18px] py-[24px] flex flex-col gap-[24px] text-center transition-colors"
  >
    <div class="aspect-w-9 aspect-h-10">
      {% render 'image',
        image: section.blocks[0].settings.image,
        alt: section.blocks[0].settings.title,
        class: 'dotted rounded-[6px] h-full w-full object-cover'
      %}
    </div>
    <p class="text-secondary" data-flavor-title>{{ section.blocks[0].settings.title }}</p>
    <p data-flavor-description>{{ section.blocks[0].settings.description }}</p>
    <p data-flavor-ingredients>{{ section.blocks[0].settings.ingredients }}</p>
  </div>

  <div class="col-span-3 flex flex-wrap gap-y-[12px] justify-center h-fit">
    {% for block in section.blocks offset: half %}
      <flavor-picker
        role="button"
        class="aria-checked:!opacity-100 hover:opacity-75 aria-checked:cursor-default cursor-pointer opacity-50 transition-opacity w-1/2 h-fit "
        aria-checked="false"
        data-title="{{ block.settings.title }}"
        data-description="{{ block.settings.description }}"
        data-ingredients="{{ block.settings.ingredients }}"
        data-color="{{ block.settings.bg_color }}"
      >
        <div class="aspect-w-9 aspect-h-10">
          {% render 'image', image: block.settings.image, class: 'h-full w-full object-cover' %}
        </div>
      </flavor-picker>
    {% endfor %}
  </div>
</div>

<script
  type="module"
>
  import { lab, formatHex, hsl } from 'https://cdn.skypack.dev/culori';

  function getPastelBackground(hex) {
    if (!hex) return '#ffffff';
    try {
      const labColor = lab(hex);
      labColor.l = 87.77;
      const hslColor = hsl(labColor);
      hslColor.s = 0.63;
      const lab2 = lab(hslColor);
      lab2.l = 87.77;

      return formatHex(lab2);
    } catch (e) {
      return hex || '#ffffff';
    }
  }

  function applyFlavorToDetail(flavorEl) {
    if (!flavorEl) return;
    // update checked attribute
    document.querySelectorAll('flavor-picker').forEach((fp) => fp.setAttribute('aria-checked', 'false'));
    flavorEl.setAttribute('aria-checked', 'true');

    const flavorContainer = document.getElementById('flavor');
    if (!flavorContainer) return;

    // update image + text
    const img = flavorEl.querySelector('img');
    const imageEl = flavorContainer.querySelector('img');
    const titleEl = flavorContainer.querySelector('[data-flavor-title]');
    const descriptionEl = flavorContainer.querySelector('[data-flavor-description]');
    const ingredientsEl = flavorContainer.querySelector('[data-flavor-ingredients]');

    if (img && imageEl) {
      imageEl.src = img.src;
      imageEl.srcset = img.srcset || '';
      imageEl.alt = 'Stone & Skilleet ' + (flavorEl.dataset.title || '') + ' packaging';
      imageEl.classList.add('dotted', 'rounded-[6px]');
    }

    if (titleEl) titleEl.textContent = flavorEl.dataset.title || '';
    if (descriptionEl) descriptionEl.textContent = flavorEl.dataset.description || '';
    if (ingredientsEl) ingredientsEl.textContent = flavorEl.dataset.ingredients || '';

    const pastel = getPastelBackground(flavorEl.dataset.color);
    flavorContainer.style.setProperty('--flavor-bg', pastel);
    flavorContainer.style.background = `var(--flavor-bg)`;
  }

  // Custom element behavior
  class FlavorPicker extends HTMLElement {
    connectedCallback() {
      if (!this._flavorClickHandler) {
        this._flavorClickHandler = () => {
          if (this.getAttribute('aria-checked') === 'true') return;
          applyFlavorToDetail(this);
        };
        this.addEventListener('click', this._flavorClickHandler);
      }
    }
    disconnectedCallback() {
      if (this._flavorClickHandler) {
        this.removeEventListener('click', this._flavorClickHandler);
      }
    }
  }

  if (!customElements.get('flavor-picker')) {
    customElements.define('flavor-picker', FlavorPicker);
  }

  // On initial load: pick flavor with aria-checked="true" or the first
  document.addEventListener('DOMContentLoaded', () => {
    const initial =
      document.querySelector('flavor-picker[aria-checked="true"]') || document.querySelector('flavor-picker');
    if (initial) applyFlavorToDetail(initial);
  });
</script>

{% schema %}
{
  "name": "Flavors",
  "blocks": [
    {
      "type": "flavor",
      "name": "Flavor",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "color",
          "id": "bg_color",
          "label": "Color (pick directly from image)"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Delicious Flavor"
        },
        {
          "type": "text",
          "id": "description",
          "label": "Description",
          "default": "A brief description of the flavor."
        },
        {
          "type": "textarea",
          "id": "ingredients",
          "label": "Ingredients",
          "default": "List of ingredients."
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Hero",
      "category": "Custom"
    }
  ]
}
{% endschema %}
